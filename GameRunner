--THIS SHOULD BE INSERTED INTO A NEW MODULE UNDER ServerScriptService/ServerHandler


-- Services
local playerService = game:GetService("Players") -- Handles player-related events
local replicatedStorage = game:GetService("ReplicatedStorage") -- Shared storage between client and server

-- Module dependencies
local dataMod = require(script.Parent.Data) -- Handles player data (coins, wins, etc.)
local lootMod = require(script.Parent.Loot) -- Handles weapon spawning
local random = Random.new() -- Random number generator

-- Remote references
local message = replicatedStorage.Message -- StringValue used to broadcast messages to players
local remaining = replicatedStorage.Remaining -- StringValue showing how many players are left

-- Game state
local gameRunner = {} -- Module table
local competitors = {} -- Players currently in the round

-- Game configuration
local MIN_PLAYERS = 2 -- Minimum players required to start a round
local INTERMISSION_LENGTH = 5 -- Seconds between rounds
local ROUND_LENGTH = 300 -- Duration of each round in seconds
local PRIZE_AMOUNT = 100 -- Coins awarded to the winner

-- Remote functions/events
local getCompetitors = replicatedStorage.GetCompetitors -- RemoteFunction for clients to request competitor list
local updateCompetitors = replicatedStorage.UpdateCompetitors -- RemoteEvent to broadcast updated competitor list

-- Respond to client requests for competitor list
getCompetitors.OnServerInvoke = function()
    return competitors
end

-- Utility: Find a player in the competitors table
local function getPlayerInTable(player)
    for i, competitor in pairs(competitors) do
        if competitor == player then
            return i, player
        end
    end
end

-- Remove a player from the round
local function removePlayerFromTable(player)
    local index, _ = getPlayerInTable(player)
    if index then
        table.remove(competitors, index)
        updateCompetitors:FireAllClients(competitors)
    end
end

-- Teleport players to random spawn points
local function spawnPlayers()
    local spawnPoints = workspace.Spawns:GetChildren()
    
    for _, player in pairs(competitors) do
        local char = player.Character or player.CharacterAdded:Wait()
        local randomIndex = random:NextInteger(1, #spawnPoints)
        local spawnPoint = spawnPoints[randomIndex]
        table.remove(spawnPoints, randomIndex) -- Prevent reuse of spawn point
        
        char:SetPrimaryPartCFrame(spawnPoint.CFrame * CFrame.new(0,2,0)) -- Offset to avoid clipping
    end
end

-- Equip player and set up death listener
local function preparePlayer(player)
    local char = player.Character or player.CharacterAdded:Wait()
    local hum = char:WaitForChild("Humanoid")

    local defaultWeapon = replicatedStorage.Weapons.M1911:Clone()
    defaultWeapon.Parent = player.Backpack
    
    hum.Died:Connect(function()
        removePlayerFromTable(player)
    end)
end

-- Add all living players to the round
local function addPlayersToTable()
    for _, player in pairs(playerService:GetPlayers()) do
        local char = player.Character or player.CharacterAdded:Wait()
        
        if char.Humanoid.Health > 0 then
            table.insert(competitors, player)
            preparePlayer(player)
        end
    end
end

-- Reload characters after round ends
local function loadAllPlayers()
    for _, player in pairs(competitors) do
        player:LoadCharacter()
    end
end

-- Remove player from round if they leave
playerService.PlayerRemoving:Connect(function(player)
    removePlayerFromTable(player)
end)

-- Main game loop
gameRunner.gameLoop = function()
    while wait(0.5) do
        if #playerService:GetPlayers() < MIN_PLAYERS then
            message.Value = "There must be ".. MIN_PLAYERS.. " players to start."
        else
            -- Intermission countdown
            local intermission = INTERMISSION_LENGTH
            repeat
                message.Value = "Intermission: ".. intermission
                intermission = intermission - 1
                wait(1)
            until intermission == 0

            message.Value = "Get ready..."
            wait(2)

            -- Start round
            addPlayersToTable()
            spawnPlayers()
            lootMod.spawnWeapons()
            updateCompetitors:FireAllClients(competitors)

            -- Round timer
            local gameTime = ROUND_LENGTH
            repeat
                message.Value = "Time remaining: ".. gameTime
                remaining.Value = #competitors.. " remaining"
                gameTime = gameTime - 1
                wait(1)
            until #competitors <= 1 or gameTime == 0

            -- End round
            loadAllPlayers()
            remaining.Value = ""

            if gameTime == 0 or #competitors == 0 then
                message.Value = "There were no victors..."
            else
                local winner = competitors[1]
                dataMod.increment(winner, "Wins", 1)
                dataMod.increment(winner, "Coins", PRIZE_AMOUNT)
                message.Value = winner.Name.. " has won the round!"
            end

            -- Reset state
            competitors = {}
            updateCompetitors:FireAllClients(competitors)
            wait(5)
        end
    end
end

-- Start the game loop in a separate thread
spawn(gameRunner.gameLoop)

return gameRunner -- Return module for external use
