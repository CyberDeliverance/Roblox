-- üì¶ Services
local replicatedStorage = game:GetService("ReplicatedStorage")
local playerService = game:GetService("Players")

-- üì° Remote references for syncing competitor data
local getCompetitors = replicatedStorage.GetCompetitors -- RemoteFunction
local updateCompetitors = replicatedStorage.UpdateCompetitors -- RemoteEvent

-- üßç Local player and camera reference
local player = playerService.LocalPlayer
local cam = workspace.CurrentCamera

-- üß† Module table
local spectate = {}

-- üéØ UI references (assumes Spectate UI is under Main)
local gui = script.Parent.Parent
local spectateFrame = gui:WaitForChild("Spectate")
local toggle = gui:WaitForChild("Toggle")
local nameLabel = spectateFrame:WaitForChild("NameLabel")
local nextPlayer = spectateFrame:WaitForChild("NextPlayer")
local lastPlayer = spectateFrame:WaitForChild("LastPlayer")

-- üßç Competitor tracking
local competitors = {}
local curIndex = 1
local spectating = false

-- üßº Hide spectate UI by default
spectateFrame.Visible = false

-- üîÑ Fetch current list of competitors from server
spectate.getCompetitors = function()
	competitors = getCompetitors:InvokeServer()
end

-- üîÅ Update competitor list when server broadcasts changes
updateCompetitors.OnClientEvent:Connect(function(list)
	competitors = list

	-- üõë If local player is still in the round, hide spectate toggle
	for _, competitor in pairs(competitors) do
		if competitor == player then
			toggle.Visible = false

			-- üßº Exit spectate mode if currently active
			if spectating then
				spectate.toggleSpectate()
			end
			return
		end
	end

	-- üé• If spectating, refocus camera on current target
	if spectating then
		spectate.focusCamera(competitors[curIndex])
	end
end)

-- üîÅ Toggle spectate mode on/off
spectate.toggleSpectate = function()
	if not spectating then
		spectating = true
		spectate.getCompetitors()
		spectateFrame.Visible = true
		local targetPlayer = competitors[1]
		spectate.focusCamera(targetPlayer)
	else
		spectating = false
		spectateFrame.Visible = false
		spectate.focusCamera(player)
	end
end

-- üé• Focus camera on target player
spectate.focusCamera = function(targetPlayer)
	if #competitors == 0 and spectating then
		-- üõë No valid targets, exit spectate mode
		spectate.toggleSpectate()
	else
		if targetPlayer then
			cam.CameraSubject = targetPlayer.Character
			nameLabel.Text = targetPlayer.Name
		else
			-- üîÅ Retry with fresh competitor list
			spectate.getCompetitors()
			local newTargetPlayer = competitors[1]
			spectate.focusCamera(newTargetPlayer)
		end
	end
end

-- üñ±Ô∏è Toggle spectate mode when button is clicked
toggle.MouseButton1Click:Connect(function()
	spectate.toggleSpectate()
end)

-- üñ±Ô∏è Cycle forward through competitors
nextPlayer.MouseButton1Click:Connect(function()
	spectate.getCompetitors()

	curIndex = curIndex + 1
	if curIndex > #competitors then
		curIndex = 1
	end

	local targetPlayer = competitors[curIndex]
	spectate.focusCamera(targetPlayer)
end)

-- üñ±Ô∏è Cycle backward through competitors
lastPlayer.MouseButton1Click:Connect(function()
	spectate.getCompetitors()

	curIndex = curIndex - 1
	if curIndex < 1 then
		curIndex = #competitors
	end

	local targetPlayer = competitors[curIndex]
	spectate.focusCamera(targetPlayer)
end)

-- üì§ Return module
return spectate
