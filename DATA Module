--THIS SCRIPT SHOULD BE INSERTED INTO A NEW MODULE UNDER ServerScriptService/ServerHandler


-- Services
local playerService = game:GetService("Players") -- Handles player-related events
local dataService = game:GetService("DataStoreService") -- Enables persistent data storage
local store = dataService:GetDataStore("DataStoreV1") -- Creates or accesses a named DataStore

-- Session data and module table
local sessionData = {} -- Stores player data during the session
local dataMod = {} -- Module table to hold functions
local AUTOSAVE_INTERVAL = 120 -- Time in seconds between automatic saves

-- Deep copy function to clone nested tables
dataMod.recursiveCopy = function(dataTable)
    local tableCopy = {}
    for index, value in pairs(dataTable) do
        if type(value) == "table" then
            value = dataMod.recursiveCopy(value) -- Recursively copy nested tables
        end
        tableCopy[index] = value
    end
    return tableCopy
end

-- Default stats for new players
local defaultData = {
    Coins = 0;
    Wins = 0;
    Kills = 0;
}

-- Loads player data from the DataStore
dataMod.load = function(player)
    local key = player.UserId
    local data
    local success, err = pcall(function()
        data = store:GetAsync(key) -- Attempt to retrieve saved data
    end)

    if not success then
        data = dataMod.load(player) -- Retry on failure (note: this can cause infinite recursion)
    end

    return data
end

-- Initializes player data when they join
dataMod.setupData = function(player)
    local key = player.UserId
    local data = dataMod.load(player)

    sessionData[key] = dataMod.recursiveCopy(defaultData) -- Start with default values

    if data then
        for index, value in pairs(data) do
            print(index, value)
            dataMod.set(player, index, value) -- Apply saved values
        end
        print(player.Name.. "'s data has been loaded!")
    else
        print(player.Name.. " is a new player!") -- No saved data found
    end
end

-- When a player joins, create their leaderstats UI and initialize data
playerService.PlayerAdded:Connect(function(player)
    local folder = Instance.new("Folder")
    folder.Name = "leaderstats"
    folder.Parent = player

    local coins = Instance.new("IntValue")
    coins.Name = "Coins"
    coins.Parent = folder
    coins.Value = defaultData.Coins

    local wins = Instance.new("IntValue")
    wins.Name = "Wins"
    wins.Parent = folder
    wins.Value = defaultData.Wins

    local kills = Instance.new("IntValue")
    kills.Name = "Kills"
    kills.Parent = folder
    kills.Value = defaultData.Kills

    dataMod.setupData(player) -- Load or initialize player data
end)

-- Sets a stat value for a player
dataMod.set = function(player, stat, value)
    local key = player.UserId
    sessionData[key][stat] = value
    player.leaderstats[stat].Value = value
end

-- Increments a stat value for a player
dataMod.increment = function(player, stat, value)
    local key = player.UserId
    sessionData[key][stat] = dataMod.get(player, stat) + value
    player.leaderstats[stat].Value = dataMod.get(player, stat)
end

-- Retrieves a stat value for a player
dataMod.get = function(player, stat)
    local key = player.UserId
    return sessionData[key][stat]
end

-- Saves a player's data to the DataStore
dataMod.save = function(player)
    local key = player.UserId
    local data = dataMod.recursiveCopy(sessionData[key]) -- Clone data to avoid mutation

    local success, err = pcall(function()
        store:SetAsync(key, data) -- Attempt to save data
    end)

    if success then
        print(player.Name.. "'s data has been saved!")
    else
        dataMod.save(player) -- Retry on failure (again, be cautious of recursion)
    end
end

-- Cleans up session data when a player leaves
dataMod.removeSessionData = function(player)
    local key = player.UserId
    sessionData[key] = nil
end

-- Handles player leaving: save and clean up
playerService.PlayerRemoving:Connect(function(player)
    dataMod.save(player)
    dataMod.removeSessionData(player)
end)

-- Autosave loop that runs every AUTOSAVE_INTERVAL seconds
local function autoSave()
    while wait(AUTOSAVE_INTERVAL) do
        print("Auto-saving data for all players")
        for key, dataTable in pairs(sessionData) do
            local player = playerService:GetPlayerByUserId(key)
            dataMod.save(player)
        end
    end
end

spawn(autoSave) -- Start autosave in a separate thread

-- Save all data and kick players when the game shuts down
game:BindToClose(function()
    for _, player in pairs(playerService:GetPlayers()) do
        dataMod.save(player)
        player:Kick("Shutting down game. All data saved.")
    end
end)

return dataMod -- Return the module for use elsewhere
