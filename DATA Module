--THIS SCRIPT SHOULD BE INSERTED INTO A NEW MODULE UNDER ServerScriptService/ServerHandler


-- Get the Players service to track player joins, leaves, and access player objects
local playerService = game:GetService("Players")

-- Get the DataStoreService to enable saving/loading persistent player data
local dataService = game:GetService("DataStoreService")

-- Create or access a named DataStore called "DataStoreV1"
-- This is where player data will be saved between sessions
local store = dataService:GetDataStore("DataStoreV1")

-- Create a table to hold temporary session data for each player
-- This data exists only while the server is running
local sessionData = {}

-- Create the module table that will hold all public functions
local dataMod = {}

-- Define a function called recursiveCopy that performs a deep copy of a table
-- This is useful for duplicating nested data structures without linking to the original
dataMod.recursiveCopy = function(dataTable)
	local tableCopy = {}
	for index, value in pairs(dataTable) do
		if type(value) == "table" then
			value = dataMod.recursiveCopy(value)
		end
		tableCopy[index] = value
	end
	return tableCopy
end

-- Define default data for new players
-- This is used when no saved data exists in the DataStore
local defaultData = {
	Coins = 0,
	Stage = 1
}

-- Loads a player's data from the data store
-- Retries recursively if the load fails
dataMod.load = function(player)
	local key = player.UserId
	local data

	local success, err = pcall(function()
		data = store:GetAsync(key)
	end)

	if not success then
		data = dataMod.load(player)
	end

	return data
end

-- Saves a player's session data to the data store
-- Retries recursively if the save fails
dataMod.save = function(player)
	local key = player.UserId
	local data = dataMod.recursiveCopy(sessionData[key])

	local success, err = pcall(function()
		store:SetAsync(key, data)
	end)

	if success then
		print(player.Name .. "'s data has been saved!")
	else
		dataMod.save(player)
	end
end

-- Function to initialize session data when a player joins the game
-- Combines default values with any saved data from previous sessions
dataMod.setupData = function(player)
	local key = player.UserId
	local data = dataMod.load(player)

	sessionData[key] = dataMod.recursiveCopy(defaultData)

	if data then
		for index, value in pairs(data) do
			print(index, value)
			sessionData[key][index] = value
		end
		print(player.Name .. "'s data has been loaded!")
	else
		print(player.Name .. " is a new player!")
	end
end

-- Listen for when a player joins the game
playerService.PlayerAdded:Connect(function(player)
	local folder = Instance.new("Folder")
	folder.Name = "leaderstats"
	folder.Parent = player

	local coins = Instance.new("IntValue")
	coins.Name = "Coins"
	coins.Parent = folder
	coins.Value = defaultData.Coins

	local stage = Instance.new("IntValue")
	stage.Name = "Stage"
	stage.Parent = folder
	stage.Value = defaultData.Stage

	dataMod.setupData(player)
end)

-- Centralized data setter
dataMod.set = function(player, stat, value)
	local key = player.UserId
	sessionData[key][stat] = value

	if player.leaderstats and player.leaderstats:FindFirstChild(stat) then
		player.leaderstats[stat].Value = value
	end
end

-- Increment function with fallback to get()
dataMod.increment = function(player, stat, value)
	local key = player.UserId
	local current = dataMod.get(player, stat) or 0
	local newValue = current + value

	sessionData[key][stat] = newValue

	if player.leaderstats and player.leaderstats:FindFirstChild(stat) then
		player.leaderstats[stat].Value = newValue
	end
end

-- Getter function
dataMod.get = function(player, stat)
	local key = player.UserId
	return sessionData[key] and sessionData[key][stat] or nil
end

-- Autosave interval in seconds
local AUTOSAVE_INTERVAL = 120

-- Autosave loop that runs every AUTOSAVE_INTERVAL seconds
local function autoSave()
	while wait(AUTOSAVE_INTERVAL) do
		print("Auto-saving data for all players")
		for key, dataTable in pairs(sessionData) do
			local player = playerService:GetPlayerByUserId(key)
			if player then
				dataMod.save(player)
			end
		end
	end
end

-- Start autosave loop
spawn(autoSave)

-- Save all data and kick players on shutdown
game:BindToClose(function()
	for _, player in pairs(playerService:GetPlayers()) do
		dataMod.save(player)
		player:Kick("Shutting down game. All data saved.")
	end
end)

-- Removes session data for a player
dataMod.removeSessionData = function(player)
	local key = player.UserId
	sessionData[key] = nil
end

-- Hook into player removal to save and clean up
playerService.PlayerRemoving:Connect(function(player)
	dataMod.save(player)
	dataMod.removeSessionData(player)
end)

-- Return the module so other scripts can require and use its functions
return dataMod
