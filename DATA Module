-- Get the Players service to track player joins, leaves, and access player objects
local playerService = game:GetService("Players")

-- Get the DataStoreService to enable saving/loading persistent player data
local dataService = game:GetService("DataStoreService")

-- Create or access a named DataStore called "DataStoreV1"
-- This is where player data will be saved between sessions
local store = dataService:GetDataStore("DataStoreV1")

-- Create a table to hold temporary session data for each player
-- This data exists only while the server is running
local sessionData = {}

-- Create the module table that will hold all public functions
local dataMod = {}

-- Define a function called recursiveCopy that performs a deep copy of a table
-- This is useful for duplicating nested data structures without linking to the original
dataMod.recursiveCopy = function(dataTable)
	
	-- Create a new empty table to hold the copied data
	local tableCopy = {}
	
	-- Loop through each key-value pair in the original table
	for index, value in pairs(dataTable) do
		
		-- If the value is itself a table, recursively copy it
		if type(value) == "table" then
			value = dataMod.recursiveCopy(value)
		end
		
		-- Assign the copied value to the same key in the new table
		tableCopy[index] = value
	end
	
	-- Return the fully copied table
	return tableCopy
end

-- Define default data for new players
-- This is used when no saved data exists in the DataStore
local defaultData = {
	Coins = 0, -- Starting currency
	Stage = 1  -- Starting level or progress stage
}

-- Function to load saved data from the DataStore
-- Returns the saved data table or nil if not found
dataMod.load = function(player)
	local key = player.UserId -- Use player's unique UserId as the key

	-- Attempt to retrieve data from the DataStore
	local success, data = pcall(function()
		return store:GetAsync(key)
	end)

	-- If retrieval was successful, return the data; otherwise return nil
	if success then
		return data
	else
		return nil
	end
end

-- Function to initialize session data when a player joins the game
-- Combines default values with any saved data from previous sessions
dataMod.setupData = function(player)
	local key = player.UserId -- Unique key for this player

	-- Load saved data from the DataStore
	local data = dataMod.load(player)

	-- Start with a deep copy of the default data
	sessionData[key] = dataMod.recursiveCopy(defaultData)

	-- If saved data exists, overwrite default values with saved values
	if data then
		for index, value in pairs(data) do
			print(index, value) -- Debug: show what data is being loaded

			-- Assign each saved value to the corresponding key in sessionData
			-- If you define dataMod.set() later, you can replace this with a call to it
			sessionData[key][index] = value
		end

		-- Confirm that the player's data was successfully loaded
		print(player.Name .. "'s data has been loaded!")
	else
		-- If no saved data exists, this is a new player
		print(player.Name .. " is a new player!")
	end
end

-- Listen for when a player joins the game
playerService.PlayerAdded:Connect(function(player)

	-- Create a Folder named "leaderstats" to hold visible player stats
	local folder = Instance.new("Folder")
	folder.Name = "leaderstats" -- This name is required for Roblox to display stats in the leaderboard
	folder.Parent = player -- Attach the folder to the player object

	-- Create an IntValue to track Coins
	local coins = Instance.new("IntValue")
	coins.Name = "Coins" -- Stat name shown in the leaderboard
	coins.Parent = folder -- Attach it to the leaderstats folder
	coins.Value = defaultData.Coins -- Initialize with default value

	-- Create an IntValue to track Stage
	local stage = Instance.new("IntValue")
	stage.Name = "Stage" -- Stat name shown in the leaderboard
	stage.Parent = folder -- Attach it to the leaderstats folder
	stage.Value = defaultData.Stage -- Initialize with default value

	-- Call setupData to load saved data or assign defaults
	dataMod.setupData(player)
end)

-- Function to set a stat value in both sessionData and leaderstats
dataMod.set = function(player, stat, value)
	local key = player.UserId -- Unique identifier for the player

	-- Update the stat in sessionData
	sessionData[key][stat] = value

	-- Update the stat in the visible leaderstats folder
	player.leaderstats[stat].Value = value
end

-- Function to increment a stat by a given value
dataMod.increment = function(player, stat, value)
	local key = player.UserId -- Unique identifier for the player

	-- Add the value to the current stat in sessionData
	sessionData[key][stat] = dataMod.get(player, stat) + value

	-- Update the stat in the visible leaderstats folder
	player.leaderstats[stat].Value = dataMod.get(player, stat)
end

-- Function to retrieve a stat value from sessionData
-- Placeholder: you can define the return logic later
dataMod.get = function(player, stat)
	local key = player.UserId -- Unique identifier for the player

	-- Return logic to be added later
	return -- ← You’ll complete this when ready
end

-- Centralized data setter
dataMod.set = function(player, stat, value)
	local key = player.UserId
	sessionData[key][stat] = value

	-- Sync with leaderstats if available
	if player.leaderstats and player.leaderstats:FindFirstChild(stat) then
		player.leaderstats[stat].Value = value
	end
end

-- Increment function with fallback to get()
dataMod.increment = function(player, stat, value)
	local key = player.UserId
	local current = dataMod.get(player, stat) or 0
	local newValue = current + value

	sessionData[key][stat] = newValue

	if player.leaderstats and player.leaderstats:FindFirstChild(stat) then
		player.leaderstats[stat].Value = newValue
	end
end

-- Getter function
dataMod.get = function(player, stat)
	local key = player.UserId
	return sessionData[key] and sessionData[key][stat] or nil
end

-- Save function: persists session data to the data store
dataMod.save = function(player)
	local key = player.UserId

	-- Deep copy to avoid mutation during async operation
	local data = dataMod.recursiveCopy(sessionData[key])

	-- Save to persistent store
	store:SetAsync(key, data)

	print(player.Name .. "'s data has been saved!")
end

-- Removes session data for a player
dataMod.removeSessionData = function(player)
	local key = player.UserId
	sessionData[key] = nil
end

-- Hook into player removal to save and clean up
playerService.PlayerRemoving:Connect(function(player)
	dataMod.save(player)
	dataMod.removeSessionData(player)
end)

-- Return the module so other scripts can require and use its functions
return dataMod
